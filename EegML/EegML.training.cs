// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Trainers.FastTree;

namespace EegML
{
    public partial class EegML
    {
        public const string RetrainFilePath =  @"C:\Src\Yijing\Yijing.py\Stephen V.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;
        public const bool RetrainAllowQuoting =  false;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader, bool allowQuoting = RetrainAllowQuoting)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader, allowQuoting);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader, bool allowQuoting)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader, allowQuoting: allowQuoting);
        }


        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrain model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Delta_AF7", @"Delta_AF7"),new InputOutputColumnPair(@"Delta_AF8", @"Delta_AF8"),new InputOutputColumnPair(@"Delta_TP10", @"Delta_TP10"),new InputOutputColumnPair(@"Theta_TP9", @"Theta_TP9"),new InputOutputColumnPair(@"Theta_AF7", @"Theta_AF7"),new InputOutputColumnPair(@"Theta_AF8", @"Theta_AF8"),new InputOutputColumnPair(@"Theta_TP10", @"Theta_TP10"),new InputOutputColumnPair(@"Alpha_TP9", @"Alpha_TP9"),new InputOutputColumnPair(@"Alpha_AF7", @"Alpha_AF7"),new InputOutputColumnPair(@"Alpha_AF8", @"Alpha_AF8"),new InputOutputColumnPair(@"Alpha_TP10", @"Alpha_TP10"),new InputOutputColumnPair(@"Beta_TP9", @"Beta_TP9"),new InputOutputColumnPair(@"Beta_AF7", @"Beta_AF7"),new InputOutputColumnPair(@"Beta_AF8", @"Beta_AF8"),new InputOutputColumnPair(@"Beta_TP10", @"Beta_TP10"),new InputOutputColumnPair(@"Gamma_TP9", @"Gamma_TP9"),new InputOutputColumnPair(@"Gamma_AF7", @"Gamma_AF7"),new InputOutputColumnPair(@"Gamma_AF8", @"Gamma_AF8"),new InputOutputColumnPair(@"Gamma_TP10", @"Gamma_TP10")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Delta_AF7",@"Delta_AF8",@"Delta_TP10",@"Theta_TP9",@"Theta_AF7",@"Theta_AF8",@"Theta_TP10",@"Alpha_TP9",@"Alpha_AF7",@"Alpha_AF8",@"Alpha_TP10",@"Beta_TP9",@"Beta_AF7",@"Beta_AF8",@"Beta_TP10",@"Gamma_TP9",@"Gamma_AF7",@"Gamma_AF8",@"Gamma_TP10"}))      
                                    .Append(mlContext.Regression.Trainers.FastForest(new FastForestRegressionTrainer.Options(){NumberOfTrees=4,NumberOfLeaves=4,FeatureFraction=1F,LabelColumnName=@"Prediction",FeatureColumnName=@"Features"}));

            return pipeline;
        }
    }
 }
